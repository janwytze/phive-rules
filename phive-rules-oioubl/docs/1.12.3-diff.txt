diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Common_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Common_Schematron.xml
index 1373112..a8856c0 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Common_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Common_Schematron.xml
@@ -28,7 +28,7 @@
     <!-- [Release 20120615] Check added according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=934 -->
     <!-- Rule to validate UBLExtensions -->
     <sch:rule abstract="true" id="UBLExtensionsCheck">
-        <sch:report test="ext:UBLExtensions/ext:UBLExtension/ext:ExtensionAgencyID = 'Digitaliseringsstyrelsen' and (ext:UBLExtensions/ext:UBLExtension/cbc:ID &lt; '1001' or ext:UBLExtensions/ext:UBLExtension/cbc:ID &gt; '1999')">[F-LIB313] Invalid UBLExtension/ID when UBLExtension/ExtensionAgencyID is equal to 'Digitaliseringsstyrelsen'. ID must be an assigned value between '1001' and '1999'.</sch:report>
+        <sch:report test="ext:UBLExtensions/ext:UBLExtension/ext:ExtensionAgencyID = 'Digitaliseringsstyrelsen' and (ext:UBLExtensions/ext:UBLExtension/cbc:ID &lt; 1001 or ext:UBLExtensions/ext:UBLExtension/cbc:ID &gt; 1999)">[F-LIB313] Invalid UBLExtension/ID when UBLExtension/ExtensionAgencyID is equal to 'Digitaliseringsstyrelsen'. ID must be an assigned value between '1001' and '1999'.</sch:report>
     </sch:rule>
 
     <!-- Rule to validate UBLVersionID -->
@@ -258,7 +258,7 @@
 
     <!-- Rule to validate Unstructured address -->
     <sch:rule abstract="true" id="UnstructuredCheck">
-        <sch:report test="(cbc:AddressFormatCode = 'Unstructured') and (count(cbc:StreetName) != '0' or count(cbc:BuildingNumber) != '0' or count(cbc:CityName) != '0' or count(cbc:PostalZone) != '0' or count(cac:Country) != '0')">[F-LIB031] An Unstructured address is only allowed to have AddressLine elements</sch:report>
+        <sch:report test="(cbc:AddressFormatCode = 'Unstructured') and (count(cbc:StreetName) != 0 or count(cbc:BuildingNumber) != 0 or count(cbc:CityName) != 0 or count(cbc:PostalZone) != 0 or count(cac:Country) != 0)">[F-LIB031] An Unstructured address is only allowed to have AddressLine elements</sch:report>
     </sch:rule>
 
     <!-- Rule to validate StructuredDK address -->
@@ -280,13 +280,13 @@
     <!-- Rule to validate StructuredID address -->
     <sch:rule abstract="true" id="StructuredIDCheck">
         <sch:report test="(cbc:AddressFormatCode = 'StructuredID') and (not(cbc:ID) or cbc:ID = '')">[F-LIB037] ID is required for a StructuredID address type</sch:report>
-        <sch:report test="(cbc:AddressFormatCode = 'StructuredID') and (count(cbc:StreetName) != '0' or count(cbc:BuildingNumber) != '0' or count(cbc:CityName) != '0' or count(cbc:PostalZone) != '0' or count(cac:Country) != '0')">[F-LIB038] Only the ID is used for a StructuredID address type</sch:report>
+        <sch:report test="(cbc:AddressFormatCode = 'StructuredID') and (count(cbc:StreetName) != 0 or count(cbc:BuildingNumber) != 0 or count(cbc:CityName) != 0 or count(cbc:PostalZone) != 0 or count(cac:Country) != 0)">[F-LIB038] Only the ID is used for a StructuredID address type</sch:report>
     </sch:rule>
 
     <!-- Rule to validate StructuredRegion address -->
     <sch:rule abstract="true" id="StructuredRegionCheck">
         <sch:report test="(cbc:AddressFormatCode = 'StructuredRegion') and ((not(cac:Country/cbc:IdentificationCode) or cac:Country/cbc:IdentificationCode = '') and (not(cbc:Region) or cbc:Region = '') and (not(cbc:District) or cbc:District = ''))">[F-LIB039] Region or District or Country/IdentificationCode is required for a StructuredRegion address type</sch:report>
-        <sch:report test="(cbc:AddressFormatCode = 'StructuredRegion') and (count(cbc:StreetName) != '0' or count(cbc:BuildingNumber) != '0' or count(cbc:CityName) != '0' or count(cbc:PostalZone) != '0')">[F-LIB040] Only Region, District, and/or Country/IdentificationCode can be used for a StructuredRegion address type</sch:report>
+        <sch:report test="(cbc:AddressFormatCode = 'StructuredRegion') and (count(cbc:StreetName) != 0 or count(cbc:BuildingNumber) != 0 or count(cbc:CityName) != 0 or count(cbc:PostalZone) != 0)">[F-LIB040] Only Region, District, and/or Country/IdentificationCode can be used for a StructuredRegion address type</sch:report>
     </sch:rule>
 
     <!-- Rule to validate TaxScheme -->
@@ -871,7 +871,7 @@
         <sch:report test="cbc:MultiplierFactorNumeric and not(cbc:BaseAmount != '')">[F-LIB248] When MultiplierFactorNumeric is used, BaseAmount is mandatory</sch:report>
         <sch:report test="starts-with(cbc:MultiplierFactorNumeric,'-')">[F-LIB227] MultiplierFactorNumeric must be a positive number</sch:report>
         <!-- [PatchRelease 20120227] Tolerance added to check according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-        <sch:report test="cbc:MultiplierFactorNumeric and ((cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &lt; '-1.00') or (cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &gt; '1.00'))">[F-LIB228] Amount must equal BaseAmount * MultiplierFactorNumeric</sch:report>
+        <sch:report test="cbc:MultiplierFactorNumeric and ((cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &lt; -1.00) or (cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &gt; 1.00))">[F-LIB228] Amount must equal BaseAmount * MultiplierFactorNumeric</sch:report>
     </sch:rule>
 
     <!-- Rule to validate PriceAllowanceCharge (toplevel only) -->
@@ -897,7 +897,7 @@
         <!-- [Release 20111201] Check exchanged with same as for AllowanceCharge according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=658 -->
         <!--<sch:report test="cbc:MultiplierFactorNumeric and not(cbc:Amount = (cbc:BaseAmount * cbc:MultiplierFactorNumeric))">[F-LIB272] Amount must equal BaseAmount * MultiplierFactorNumeric</sch:report>-->
         <!-- [PatchRelease 20120227] Tolerance added to check according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-        <sch:report test="cbc:MultiplierFactorNumeric and ((cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &lt; '-1.00') or (cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &gt; '1.00'))">[F-LIB228] Amount must equal BaseAmount * MultiplierFactorNumeric</sch:report>
+        <sch:report test="cbc:MultiplierFactorNumeric and ((cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &lt; -1.00) or (cbc:Amount - (cbc:BaseAmount * cbc:MultiplierFactorNumeric) &gt; 1.00))">[F-LIB228] Amount must equal BaseAmount * MultiplierFactorNumeric</sch:report>
     </sch:rule>
 
     <!-- Rule to validate TaxTotal -->
@@ -973,7 +973,7 @@
         <!-- Check that the Calculation ot the TaxAmount is correct -->
         <!-- [Release N/A] Added check according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=1361 -->
         <!-- Removed from version 1.7 in last minute! -->
-        <!--<sch:report test="(cac:TaxCategory/cac:TaxScheme/cbc:ID = 63) and ((((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &lt; '-0.50') or (((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &gt; '0.50') )">[F-LIB326] In TaxTotal/TaxSubTotal (header), the TaxableAmount multiplied by TaxCategory/Precent must equal TaxAmount</sch:report>-->
+        <!--<sch:report test="(cac:TaxCategory/cac:TaxScheme/cbc:ID = 63) and ((((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &lt; -0.50) or (((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &gt; 0.50) )">[F-LIB326] In TaxTotal/TaxSubTotal (header), the TaxableAmount multiplied by TaxCategory/Precent must equal TaxAmount</sch:report>-->
 
         <!-- [Release 20160915] Added check according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=1679 -->
         <sch:report test="(cac:TaxCategory/cac:TaxScheme/cbc:ID = 'VAT') and not(cac:TaxCategory/cbc:Percent)">[F-LIB333] When TaxCategory/TaxScheme/Id is VAT, the TaxCategory/Percent must be present.</sch:report>
@@ -984,7 +984,7 @@
         <!-- Check that the Calculation ot the TaxAmount is correct -->
         <!-- [Release N/A] Added check according to issue: https://bugs.softwareborsen.dk/show_bug.cgi?id=1361 -->
         <!-- Removed from version 1.7 in last minute! -->
-        <!--<sch:report test="(cac:TaxCategory/cac:TaxScheme/cbc:ID = 63) and (number(cbc:TaxAmount) &gt; 0) and ((((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &lt; '-0.15') or (((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &gt; '0.15') )">[F-LIB329] In TaxTotal/TaxSubTotal (line), if calculated, the TaxableAmount multiplied by TaxCategory/Precent must equal TaxAmount</sch:report>-->
+        <!--<sch:report test="(cac:TaxCategory/cac:TaxScheme/cbc:ID = 63) and (number(cbc:TaxAmount) &gt; 0) and ((((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &lt; -0.15) or (((cbc:TaxableAmount * (cac:TaxCategory/cbc:Percent div 100)) - cbc:TaxAmount) &gt; 0.15) )">[F-LIB329] In TaxTotal/TaxSubTotal (line), if calculated, the TaxableAmount multiplied by TaxCategory/Precent must equal TaxAmount</sch:report>-->
     </sch:rule>
 
     <!-- Rule to validate Attachment -->
diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_CreditNote_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_CreditNote_Schematron.xml
index d7485f4..231cc1e 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_CreditNote_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_CreditNote_Schematron.xml
@@ -854,7 +854,7 @@
 			<sch:report test="count(../cac:TaxTotal/cbc:RoundingAmount) and not(cbc:PayableRoundingAmount)">[F-CRN071] PayableRoundingAmount is mandatory when TaxTotal/RoundingAmount elements are present</sch:report>
 			<!-- Validate -->
 			<!-- [Release 20120615] Check changed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:CreditNoteLine/cbc:LineExtensionAmount)) &gt; '0.0055') or ((cbc:LineExtensionAmount - sum(../cac:CreditNoteLine/cbc:LineExtensionAmount)) &lt; '-0.0055')">[F-CRN072] The sum of CreditNoteLine/LineExtensionAmount ('<sch:value-of select="$TotalLineExtensionAmount"/>') elements must equal LineExtensionAmount ('<sch:value-of select="cbc:LineExtensionAmount"/>')</sch:report>
+			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:CreditNoteLine/cbc:LineExtensionAmount)) &gt; 0.0055) or ((cbc:LineExtensionAmount - sum(../cac:CreditNoteLine/cbc:LineExtensionAmount)) &lt; -0.0055)">[F-CRN072] The sum of CreditNoteLine/LineExtensionAmount ('<sch:value-of select="$TotalLineExtensionAmount"/>') elements must equal LineExtensionAmount ('<sch:value-of select="cbc:LineExtensionAmount"/>')</sch:report>
 
 			<sch:report test="cbc:TaxExclusiveAmount and not(format-number(cbc:TaxExclusiveAmount,'##.00') = format-number(sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount),'##.00'))">[F-CRN073] The sum of TaxTotal/TaxSubtotal/TaxAmount elements must equal TaxExclusiveAmount</sch:report>
 			<sch:report test="cbc:TaxInclusiveAmount and not(format-number(cbc:TaxInclusiveAmount,'##.00') = format-number(sum(cbc:LineExtensionAmount) + sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount) + sum(cbc:ChargeTotalAmount) - sum(cbc:AllowanceTotalAmount) + sum(cbc:PayableRoundingAmount),'##.00'))">[F-CRN074] TaxInclusiveAmount is calculated incorrectly</sch:report>
@@ -887,8 +887,8 @@
 
 			<xsl:variable name="AlteredPayableSum">
 				<xsl:choose>
-					<xsl:when test="$TotalSum = -.00">.00</xsl:when>
-					<xsl:otherwise><xsl:value-of select="$TotalSum"/></xsl:otherwise>
+					<xsl:when test="$TotalSum = '-.00'">.00</xsl:when>
+					<xsl:otherwise><xsl:value-of select="xs:decimal($TotalSum)"/></xsl:otherwise>
 				</xsl:choose>
 			</xsl:variable>
 
@@ -960,21 +960,21 @@
 			<sch:let name="NegativePA" value="starts-with(cac:Price/cbc:PriceAmount,'-')"/>
 
             <!-- OrderableUnitFactorRate is not mandatory - so default to 1, if not exists. -->
-            <sch:let name="orderableUnitFactorRate" value="concat(
+            <sch:let name="orderableUnitFactorRate" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:OrderableUnitFactorRate, 1, number(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '') * string-length(cac:Price/cbc:OrderableUnitFactorRate)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
-                                                            )"/>
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
+                                                            ))"/>
             <sch:let name="quantity" value="cbc:CreditedQuantity"/>
             <sch:let name="priceAmount" value="cac:Price/cbc:PriceAmount"/>
             <!-- BaseQuantity is not mandatory - so default to 1, if not exists. -->
-            <sch:let name="baseQuantity" value="concat(
+            <sch:let name="baseQuantity" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:BaseQuantity, 1, number(normalize-space(cac:Price/cbc:BaseQuantity) != '') * string-length(cac:Price/cbc:BaseQuantity)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
-                                                            )"/>
-            <sch:let name="lineExtensionAmount" value="concat(
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
+                                                            ))"/>
+            <sch:let name="lineExtensionAmount" value="xs:decimal(concat(
                                                                 substring(cbc:LineExtensionAmount, 1, number(normalize-space(cbc:LineExtensionAmount) != '' ) * string-length(cbc:LineExtensionAmount)),
-                                                                substring(0, 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
-                                                        )"/>
+                                                                substring('0', 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
+                                                        ))"/>
             <sch:let name="calculatedTotal" value="($priceAmount div $baseQuantity) * $quantity"/>
 
 			<sch:let name="calculatedTotalUnitCodeDifferent" value="$priceAmount * $quantity * $orderableUnitFactorRate"/>
@@ -1003,7 +1003,7 @@
 			<!-- [Release 20111201] Added 1 warning and 4 new checks according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=659 -->
 			<!-- A -->
 			<!-- 071021; NH-501  -->
-			<!-- sch:report test="($T and $PER) and ((cbc:LineExtensionAmount &lt; (cbc:CreditedQuantity * cac:Price/cbc:PriceAmount - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:CreditedQuantity * cac:Price/cbc:PriceAmount + '01.00')))">[F-CRN085] LineExtensionAmount must equal CreditedQuantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report -->
+			<!-- sch:report test="($T and $PER) and ((cbc:LineExtensionAmount &lt; (cbc:CreditedQuantity * cac:Price/cbc:PriceAmount - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:CreditedQuantity * cac:Price/cbc:PriceAmount + 01.00)))">[F-CRN085] LineExtensionAmount must equal CreditedQuantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report -->
 			<!-- B, C, D, H, I & J -->
 
 			<!-- [020422] - NH-50 -->
@@ -1011,14 +1011,14 @@
 
 			<!-- E -->
 
-			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN212] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * CreditNote.PricingExchangeRate.CalculationRate) (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-			<sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN213] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-			<sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN198] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN212] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * CreditNote.PricingExchangeRate.CalculationRate) (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+			<sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN213] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+			<sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN198] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
 
 			<!-- F -->
-			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeDifferent ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeDifferent) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN214] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-			<sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN215] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-			<sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN199] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeDifferent ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeDifferent) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN214] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+			<sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN215] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+			<sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN199] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
 
 			<!-- G -->
 			<sch:report test="$unitCodeDifferent and ($notFree and $noExchangeRate) and (($lineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent - 1.00)) or ($lineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent + 1.00)))">[F-CRN194] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) +/- 1.00 (CreditedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
@@ -1026,14 +1026,14 @@
 			<sch:report test="$unitCodeNeither   and ($notFree and $noExchangeRate) and (($lineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual - 1.00)) or ($lineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual  + 1.00)))">[F-CRN216] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="$lineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) +/- 1.00.</sch:report>
 
 			<!-- K -->
-			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN200] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-			<sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN217] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-CRN218] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN200] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+			<sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN217] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>) * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-CRN218] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity * CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00.</sch:report>
 
 			<!-- L -->
-			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN201] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-			<sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN219] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-CRN220] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN201] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (CreditedQuantity (<sch:value-of select="cbc:CreditedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+			<sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN219] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * CreditedQuantity (<sch:value-of select="$quantity"/>)) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (CreditNotedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-CRN220] CreditNote line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * CreditedQuantity (<sch:value-of select="$quantity"/>) div CreditNote.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00.</sch:report>
 			<!-- NH-50 -->
 
 
diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Invoice_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Invoice_Schematron.xml
index 0acbcf6..9bd1f72 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Invoice_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Invoice_Schematron.xml
@@ -1278,7 +1278,7 @@
 			<!-- Validate -->
 			<!-- [Release 20120615] Check changed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
 
-			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:InvoiceLine[not(cbc:FreeOfChargeIndicator) or cbc:FreeOfChargeIndicator = 'false']/cbc:LineExtensionAmount)) &gt; '0.0055') or ((cbc:LineExtensionAmount - sum(../cac:InvoiceLine[not(cbc:FreeOfChargeIndicator) or cbc:FreeOfChargeIndicator = 'false']/cbc:LineExtensionAmount)) &lt; '-0.0055')">[F-INV126] The sum of InvoiceLine/LineExtensionAmount ('<sch:value-of select="$TotalLineExtensionAmount"/>') elements must equal LegalMonetaryTotal/LineExtensionAmount ('<sch:value-of select="cbc:LineExtensionAmount"/>')</sch:report>
+			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:InvoiceLine[not(cbc:FreeOfChargeIndicator) or cbc:FreeOfChargeIndicator = 'false']/cbc:LineExtensionAmount)) &gt; 0.0055) or ((cbc:LineExtensionAmount - sum(../cac:InvoiceLine[not(cbc:FreeOfChargeIndicator) or cbc:FreeOfChargeIndicator = 'false']/cbc:LineExtensionAmount)) &lt; -0.0055)">[F-INV126] The sum of InvoiceLine/LineExtensionAmount ('<sch:value-of select="$TotalLineExtensionAmount"/>') elements must equal LegalMonetaryTotal/LineExtensionAmount ('<sch:value-of select="cbc:LineExtensionAmount"/>')</sch:report>
 
 			<sch:report test="cbc:TaxExclusiveAmount and not(format-number(cbc:TaxExclusiveAmount,'##.00') = format-number(sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount),'##.00'))">[F-INV127] The sum of TaxTotal/TaxSubtotal/TaxAmount elements must equal TaxExclusiveAmount</sch:report>
 			<sch:report test="cbc:TaxInclusiveAmount and not(format-number(cbc:TaxInclusiveAmount,'##.00') = format-number(sum(cbc:LineExtensionAmount) + sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount) + sum(cbc:ChargeTotalAmount) - sum(cbc:AllowanceTotalAmount) + sum(cbc:PayableRoundingAmount),'##.00'))">[F-INV128] TaxInclusiveAmount is calculated incorrectly</sch:report>
@@ -1306,8 +1306,8 @@
 
 			<xsl:variable name="AlteredPayableSum">
 				<xsl:choose>
-					<xsl:when test="$TotalSum = -.00">.00</xsl:when>
-					<xsl:otherwise><xsl:value-of select="$TotalSum"/></xsl:otherwise>
+					<xsl:when test="$TotalSum = '-.00'">.00</xsl:when>
+					<xsl:otherwise><xsl:value-of select="xs:decimal($TotalSum)"/></xsl:otherwise>
 				</xsl:choose>
 			</xsl:variable>
 
@@ -1381,21 +1381,21 @@
 			<sch:let name="NegativeLEA" value="starts-with(cbc:InvoicedQuantity,'-')"/>
 			<sch:let name="NegativePA" value="starts-with(cac:Price/cbc:PriceAmount,'-')"/>
             <!-- OrderableUnitFactorRate is not mandatory - so default to 1, if not exists. -->
-            <sch:let name="orderableUnitFactorRate" value="concat(
+            <sch:let name="orderableUnitFactorRate" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:OrderableUnitFactorRate, 1, number(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '') * string-length(cac:Price/cbc:OrderableUnitFactorRate)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
-                                                    )"/>
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
+                                                    ))"/>
             <sch:let name="quantity" value="cbc:InvoicedQuantity"/>
             <sch:let name="priceAmount" value="cac:Price/cbc:PriceAmount"/>
             <!-- BaseQuantity is not mandatory - so default to 1, if not exists. -->
-            <sch:let name="baseQuantity" value="concat(
+            <sch:let name="baseQuantity" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:BaseQuantity, 1, number(normalize-space(cac:Price/cbc:BaseQuantity) != '') * string-length(cac:Price/cbc:BaseQuantity)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
-                                                    )"/>
-            <sch:let name="lineExtensionAmount" value="concat(
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
+                                                    ))"/>
+            <sch:let name="lineExtensionAmount" value="xs:decimal(concat(
                                                                 substring(cbc:LineExtensionAmount, 1, number(normalize-space(cbc:LineExtensionAmount) != '' ) * string-length(cbc:LineExtensionAmount)),
-                                                                substring(0, 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
-                                                    )"/>
+                                                                substring('0', 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
+                                                    ))"/>
             <sch:let name="calculatedTotalUnitCodeDifferent" value="$priceAmount * $quantity * $orderableUnitFactorRate"/>
             <sch:let name="calculatedTotalUnitCodeEqual" value="($priceAmount * $quantity) div $baseQuantity"/>
 
@@ -1452,20 +1452,20 @@
 			<!-- <sch:report test="../cbc:PricingCurrencyCode">[I-INV999] Validation not yet implemented!</sch:report> -->
 			<!-- [Release 20111201] Added 1 warning and 4 new checks according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=659 -->
 			<!-- A -->
-			<!-- <sch:report test="($notFree and $noFactorRate and $noExchangeRate) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual + '01.00')))">[F-INV144] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) MUST equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>) +/- 1.00 (when OrderableUnitFactorRate not present)</sch:report> -->
+			<!-- <sch:report test="($notFree and $noFactorRate and $noExchangeRate) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual + 01.00)))">[F-INV144] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) MUST equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>) +/- 1.00 (when OrderableUnitFactorRate not present)</sch:report> -->
 
             <!-- B, C, D, H, I & J -->
 			<sch:report test="($notFree and not($noExchangeRate) and $CRandMOC)">[W-INV323] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) cannot be evaluated since either 'cbc:CalculationRate', 'cbc:MathematicOperatorCode' or both are not present in 'Invoice/cac:PricingExchangeRate'</sch:report>
 
 			<!-- E -->
-			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV326] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Invoice.PricingExchangeRate.CalculationRate) (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-            <sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV344] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-            <sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV346] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV326] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Invoice.PricingExchangeRate.CalculationRate) (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+            <sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV344] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+            <sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV346] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
 
 			<!-- F -->
-			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeDifferent ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeDifferent) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV327] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-            <sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV345] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-            <sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV347] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeDifferent ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeDifferent) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV327] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+            <sch:report test="$unitCodeEqual     and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV345] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+            <sch:report test="$unitCodeNeither   and ($notFree and $noFactorRate and not($noExchangeRate) and not($CRandMOC) and $Divide) and ((cbc:LineExtensionAmount &lt; ((( $calculatedTotalUnitCodeEqual ) div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; ((($calculatedTotalUnitCodeEqual) div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV347] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide' and OrderableUnitFactorRate is not present) +/- 1.00.</sch:report>
 
 			<!-- G -->
 			<!-- [Release 20190315] Changed description: https://bugs.softwareborsen.dk/show_bug.cgi?id=2111 -->
@@ -1476,14 +1476,14 @@
             <sch:report test="$unitCodeNeither   and ($notFree and $noExchangeRate) and (($lineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual - 1.00)) or ($lineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual  + 1.00)))">[F-INV348] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="$lineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) +/- 1.00.</sch:report>
 
 			<!-- K -->
-			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV328] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-            <sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV341] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - '01.00')) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + '01.00')))">[F-INV349] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV328] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+            <sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV341] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>) * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+			<sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Multiply) and ((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate - 01.00)) or (cbc:LineExtensionAmount &gt; ($calculatedTotalUnitCodeEqual * ../cac:PricingExchangeRate/cbc:CalculationRate + 01.00)))">[F-INV349] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity * Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'multiply') +/- 1.00.</sch:report>
 
             <!-- L -->
-			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV329] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
-            <sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV342] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
-            <sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - '01.00')) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + '01.00')))">[F-INV350] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00.</sch:report>
+			<sch:report test="$unitCodeDifferent and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeDifferent div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV329] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal (InvoicedQuantity (<sch:value-of select="cbc:InvoicedQuantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
+            <sch:report test="$unitCodeEqual     and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV342] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal ((Price.PriceAmount (<sch:value-of select="$priceAmount"/>) / Price.BaseQuantity (<sch:value-of select="$baseQuantity"/>) ) * InvoicedQuantity (<sch:value-of select="$quantity"/>)) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00 (InvoicedQuantity unitCode and Price.BaseQuantity unitCode are equal)</sch:report>
+            <sch:report test="$unitCodeNeither   and ($notFree and not($noFactorRate) and not($noExchangeRate) and not($CRandMOC) and $Divide) and (((cbc:LineExtensionAmount &lt; ($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) - 01.00)) or (cbc:LineExtensionAmount &gt; (($calculatedTotalUnitCodeEqual div ../cac:PricingExchangeRate/cbc:CalculationRate) + 01.00)))">[F-INV350] Invoice line '<sch:value-of select="cbc:ID"/>' with lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Price.PriceAmount (<sch:value-of select="$priceAmount"/>) * InvoicedQuantity (<sch:value-of select="$quantity"/>) div Invoice.PricingExchangeRate.CalculationRate (when '../cac:PricingExchangeRate' is present with MathematicOperatorCode = 'divide') +/- 1.00.</sch:report>
 
 			<!-- [Release 20111201] Check removed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=647 -->
 			<!--<sch:report test="$Nes and $O">[F-INV325] For this profileID, OrderableUnitFactorRate can only have the value of 1</sch:report>-->
diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderChange_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderChange_Schematron.xml
index 21e3902..bd92ceb 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderChange_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderChange_Schematron.xml
@@ -1120,7 +1120,7 @@
 			<sch:report test="count(../cac:TaxTotal/cbc:RoundingAmount) and not(cbc:PayableRoundingAmount)">[F-OCH065] PayableRoundingAmount is mandatory when TaxTotal/RoundingAmount elements are present</sch:report>
 			<!-- Validate -->
 			<!-- [Release 20120615] Check changed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; '0.0055') or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; '-0.0055')">[F-OCH066] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report>
+			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; 0.0055) or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; -0.0055)">[F-OCH066] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report>
 			<sch:report test="cbc:TaxExclusiveAmount and not(format-number(cbc:TaxExclusiveAmount,'##.00') = format-number(sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount),'##.00'))">[F-OCH067] The sum of TaxTotal/TaxSubtotal/TaxAmount elements must equal TaxExclusiveAmount</sch:report>
 			<sch:report test="cbc:TaxInclusiveAmount and not(format-number(cbc:TaxInclusiveAmount,'##.00') = format-number(sum(cbc:LineExtensionAmount) + sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount) + sum(cbc:ChargeTotalAmount) - sum(cbc:AllowanceTotalAmount) + sum(cbc:PayableRoundingAmount),'##.00'))">[F-OCH068] TaxInclusiveAmount is calculated incorrectly</sch:report>
 			<sch:report test="cbc:AllowanceTotalAmount and not(format-number(cbc:AllowanceTotalAmount,'##.00') = format-number(sum(../cac:AllowanceCharge[cbc:ChargeIndicator='false']/cbc:Amount),'##.00'))">[F-OCH069] The sum of AllowanceCharge/Amount elements (with ChargeIndicator='false') must equal AllowanceTotalAmount</sch:report>
@@ -1223,8 +1223,8 @@
 
 			<sch:assert test="cbc:ID != ''">[F-OCH132] Invalid ID. Must contain a value</sch:assert>
 			<sch:extends rule="AccountingCostCheck"/>
-			<sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + '01.00')))">[F-OCH140] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report>
-			<sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + '01.00')))">[F-OCH179] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report>
+			<sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + 01.00)))">[F-OCH140] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report>
+			<sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + 01.00)))">[F-OCH179] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report>
 		</sch:rule>
 		<!-- Validate UUID -->
 		<!-- Validate Note -->
diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderResponse_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderResponse_Schematron.xml
index 7a52db1..fb291e9 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderResponse_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_OrderResponse_Schematron.xml
@@ -1112,7 +1112,7 @@
 			<sch:report test="count(../cac:TaxTotal/cbc:RoundingAmount) and not(cbc:PayableRoundingAmount)">[F-ORE068] PayableRoundingAmount is mandatory when TaxTotal/RoundingAmount elements are present</sch:report>
 			<!-- Validate -->
 			<!-- [Release 20120615] Check changed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; '0.0055') or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; '-0.0055')">[F-ORE069] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report>
+			<sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; 0.0055) or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; -0.0055)">[F-ORE069] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report>
 			<sch:report test="cbc:TaxExclusiveAmount and not(format-number(cbc:TaxExclusiveAmount,'##.00') = format-number(sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount),'##.00'))">[F-ORE070] The sum of TaxTotal/TaxSubtotal/TaxAmount elements must equal TaxExclusiveAmount</sch:report>
 			<sch:report test="cbc:TaxInclusiveAmount and not(format-number(cbc:TaxInclusiveAmount,'##.00') = format-number(sum(cbc:LineExtensionAmount) + sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount) + sum(cbc:ChargeTotalAmount) - sum(cbc:AllowanceTotalAmount) + sum(cbc:PayableRoundingAmount),'##.00'))">[F-ORE071] TaxInclusiveAmount is calculated incorrectly</sch:report>
 			<sch:report test="cbc:AllowanceTotalAmount and not(format-number(cbc:AllowanceTotalAmount,'##.00') = format-number(sum(../cac:AllowanceCharge[cbc:ChargeIndicator='false']/cbc:Amount),'##.00'))">[F-ORE072] The sum of AllowanceCharge/Amount elements (with ChargeIndicator='false') must equal AllowanceTotalAmount</sch:report>
@@ -1216,8 +1216,8 @@
 
 			<sch:assert test="cbc:ID != ''">[F-ORE082] Invalid ID. Must contain a value</sch:assert>
 			<sch:extends rule="AccountingCostCheck"/>
-			<sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + '01.00')))">[F-ORE090] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report>
-			<sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + '01.00')))">[F-ORE143] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report>
+			<sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + 01.00)))">[F-ORE090] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report>
+			<sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + 01.00)))">[F-ORE143] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report>
 		</sch:rule>
 		<!-- Validate UUID -->
 		<!-- Validate Note -->
diff --git a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Order_Schematron.xml b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Order_Schematron.xml
index 552a761..577e995 100644
--- a/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Order_Schematron.xml
+++ b/phive-rules-oioubl/src/test/resources/rule-source/oioubl/1.12.3/OIOUBL_Order_Schematron.xml
@@ -1030,7 +1030,7 @@
 			<sch:report test="count(../cac:TaxTotal/cbc:RoundingAmount) and not(cbc:PayableRoundingAmount)">[F-ORD115] PayableRoundingAmount is mandatory when TaxTotal/RoundingAmount elements are present</sch:report>
 			<!-- Validate -->
 			<!-- [Release 20120615] Check changed according to issue: http://bugs.softwareborsen.dk/show_bug.cgi?id=823 -->
-			<!-- sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; '0.0055') or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; '-0.0055')">[F-ORD116] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report-->
+			<!-- sch:report test="((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &gt; 0.0055) or ((cbc:LineExtensionAmount - sum(../cac:OrderLine/cac:LineItem/cbc:LineExtensionAmount)) &lt; -0.0055)">[F-ORD116] The sum of Orderline/LineItem/LineExtensionAmount elements must equal LineExtensionAmount</sch:report-->
 			<sch:report test="cbc:TaxExclusiveAmount and not(format-number(cbc:TaxExclusiveAmount,'##.00') = format-number(sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount),'##.00'))">[F-ORD117] The sum of TaxTotal/TaxSubtotal/TaxAmount elements must equal TaxExclusiveAmount</sch:report>
 			<sch:report test="cbc:TaxInclusiveAmount and not(format-number(cbc:TaxInclusiveAmount,'##.00') = format-number(sum(cbc:LineExtensionAmount) + sum(../cac:TaxTotal/cac:TaxSubtotal/cbc:TaxAmount) + sum(cbc:ChargeTotalAmount) - sum(cbc:AllowanceTotalAmount) + sum(cbc:PayableRoundingAmount),'##.00'))">[F-ORD118] TaxInclusiveAmount is calculated incorrectly</sch:report>
 			<sch:report test="cbc:AllowanceTotalAmount and not(format-number(cbc:AllowanceTotalAmount,'##.00') = format-number(sum(../cac:AllowanceCharge[cbc:ChargeIndicator='false']/cbc:Amount),'##.00'))">[F-ORD119] The sum of AllowanceCharge/Amount elements (with ChargeIndicator='false') must equal AllowanceTotalAmount</sch:report>
@@ -1122,22 +1122,22 @@
 			<sch:let name="nolineExtensionAmount" value="not(cbc:LineExtensionAmount)"/>
 
 			<!-- OrderableUnitFactorRate is not mandatory - so default to 1, if not exists. -->
-			<sch:let name="orderableUnitFactorRate" value="concat(
+			<sch:let name="orderableUnitFactorRate" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:OrderableUnitFactorRate, 1, number(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '') * string-length(cac:Price/cbc:OrderableUnitFactorRate)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
-                                                    )"/>
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:OrderableUnitFactorRate) != '')) * 1)
+                                                    ))"/>
 
 			<sch:let name="quantity" value="cbc:Quantity"/>
 			<sch:let name="priceAmount" value="cac:Price/cbc:PriceAmount"/>
 			<!-- BaseQuantity is not mandatory - so default to 1, if not exists. -->
-			<sch:let name="baseQuantity" value="concat(
+			<sch:let name="baseQuantity" value="xs:decimal(concat(
                                                                 substring(cac:Price/cbc:BaseQuantity, 1, number(normalize-space(cac:Price/cbc:BaseQuantity) != '') * string-length(cac:Price/cbc:BaseQuantity)),
-                                                                substring(1, 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
-                                                    )"/>
-			<sch:let name="lineExtensionAmount" value="concat(
+                                                                substring('1', 1, number(not(normalize-space(cac:Price/cbc:BaseQuantity) != '')) * 1)
+                                                    ))"/>
+			<sch:let name="lineExtensionAmount" value="xs:decimal(concat(
                                                                 substring(cbc:LineExtensionAmount, 1, number(normalize-space(cbc:LineExtensionAmount) != '' ) * string-length(cbc:LineExtensionAmount)),
-                                                                substring(0, 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
-                                                    )"/>
+                                                                substring('0', 1, number(not(normalize-space(cbc:LineExtensionAmount) != '')) * 1)
+                                                    ))"/>
 			<sch:let name="calculatedTotalUnitCodeDifferent" value="$priceAmount * $quantity * $orderableUnitFactorRate"/>
 			<sch:let name="calculatedTotalUnitCodeEqual" value="($priceAmount * $quantity) div $baseQuantity"/>
 
@@ -1167,8 +1167,8 @@
 
 			<!-- [020422] - NH-50 -->
 			<!-- Original test-->
-			<!-- sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + '01.00')))">[F-ORD245] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report -->
-			<!-- sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + '01.00')))">[F-ORD246] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report -->
+			<!-- sch:report test="(not($L) and $T) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount - 01.00)) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount + 01.00)))">[F-ORD245] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount (when OrderableUnitFactorRate not present)</sch:report -->
+			<!-- sch:report test="(not($L) and not($T)) and ((cbc:LineExtensionAmount &lt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate - '01.00')) or (cbc:LineExtensionAmount &gt; (cbc:Quantity * cac:Price/cbc:PriceAmount * cac:Price/cbc:OrderableUnitFactorRate + 01.00)))">[F-ORD246] When present, LineExtensionAmount must equal Quantity * Price.PriceAmount * Price.OrderableUnitFactorRate</sch:report -->
 
 			<!-- G -->
 			<sch:report test="not($nolineExtensionAmount) and $unitCodeDifferent and (($lineExtensionAmount &lt; ($calculatedTotalUnitCodeDifferent - 1.00)) or ($lineExtensionAmount &gt; ($calculatedTotalUnitCodeDifferent + 1.00)))">[F-ORD246] Order line '<sch:value-of select="cbc:ID"/>' - When present, lineExtensionAmount (<sch:value-of select="cbc:LineExtensionAmount"/>) must equal Quantity (<sch:value-of select="cbc:Quantity"/>) * Price.PriceAmount (<sch:value-of select="cac:Price/cbc:PriceAmount"/>) * Price.OrderableUnitFactorRate (<sch:value-of select="cac:Price/cbc:OrderableUnitFactorRate"/>) +/- 1.00 (Quantity unitCode and Price.BaseQuantity unitCode are not equal)</sch:report>
